ASH Menu Design Ideas
=====================

This document outlines potential future improvements for the ASH menu system, specifically for handling recipe groups.


Idea 1: Sub-Menus for Groups
----------------------------

This is the simplest approach to grouping.

- **Concept:** The main menu displays ungrouped recipes and group names. Selecting a group name (e.g., by number) navigates the user to a new, separate menu screen that shows only the recipes within that group. This sub-menu would include a "Back" option to return to the main menu.
- **Pros:**
    - Highly scalable; the main menu remains clean regardless of how many recipes are in groups.
    - Simple to implement and understand.
    - Provides a focused view, reducing cognitive load for the user.
- **Cons:**
    - Can feel "clunky" or slow if a group only contains one or two recipes, as it requires extra navigation steps.
    - Recipes inside groups are not immediately visible, reducing discoverability.


Idea 2: Hybrid Menu with Most Recently Used (MRU) Previews
----------------------------------------------------------

This is a more advanced approach that combines discoverability with organization.

- **Concept:** The main menu displays both ungrouped recipes and "group boxes". Each group box would show a preview of the top 5 most recently used (MRU) recipes from that group. The group box itself would also be selectable to view all recipes in that group (as in Idea 1).
- **Pros:**
    - Excellent discoverability for frequently used recipes.
    - Solves the "clunkiness" of the sub-menu model for common tasks.
    - Remains scalable and organized, as the main menu size is controlled.
- **Cons:**
    - Requires state management to track MRU history for each group (e.g., in a `group_history.json` file).
    - More complex menu generation and input handling logic.


Idea 3: Alphanumeric Selection (The "4b" Idea)
----------------------------------------------

This is a user experience enhancement for the Hybrid/MRU Menu.

- **Concept:** Instead of numbering every single item on the main menu sequentially, this model assigns stable numbers to top-level items (ungrouped recipes and group boxes). The MRU recipes within a group preview would be assigned letters (a, b, c, etc.).
    - To select the second MRU recipe in the fourth menu item (a group), the user would type `4b`.
    - To select the group itself to see all its recipes, the user would just type `4`.
- **Pros:**
    - **Stable Numbering:** Top-level menu numbers don't change when MRU lists are updated, making the menu more predictable.
    - **Clear Hierarchy:** The `4b` syntax intuitively communicates a parent-child relationship between the group and the recipe.
    - **Faster Selection:** Feels more like a direct command and reduces the mental effort of scanning a long, sequentially numbered list.
- **Cons:**
    - The input parsing logic becomes slightly more complex, as it needs to handle both numeric and alphanumeric inputs.


Idea 4: Directory-Based Groups (Structural Improvement)
------------------------------------------------------

This is a structural alternative to using a "group" property inside each recipe file. It provides a much cleaner organization.

- **Concept:** Instead of a flat list of recipes in the `recipes/` folder, each group is represented by a subdirectory.
    - `recipes/`
        - `File Tools/` (This directory is a group)
            - `group_config.json` (Contains metadata for the "File Tools" group)
            - `recipe1.json`
            - `recipe1.py`
        - `ungrouped_recipe.json` (This recipe is not in any group)

- **group_config.json:** This file would define the group's properties, such as:
    - `title`: "File Manipulation Tools" (The display name for the group box)
    - `description`: "A collection of recipes for working with files."
    - `color`, `color_end`: Styling for the group's menu panel.
    - `mru_limit`: (Optional) How many MRU items to show in the preview, e.g., 5.

- **Pros:**
    - **Superior Organization:** The file system itself is organized, which is highly intuitive.
    - **Clear Configuration:** Group settings are cleanly separated into their own configuration file, not mixed into a recipe.
    - **Simpler Recipes:** Recipe files no longer need a `group` property.
- **Cons:**
    - **More Complex Loading:** The recipe loader must be updated to recursively scan directories and handle both grouped and ungrouped recipes.
